generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @unique
  balance     Int        @default(0)
  address     String?
  displayName String?
  image       String     @default("https://res.cloudinary.com/dqervfik7/image/upload/v1698202449/10-day-project/image/users/n5o6jwbsitgdvsuxrhfa.png")
  accountId   Int        @default(autoincrement())
  bio         String?
  createdAt   DateTime   @default(now())
  orders      Order[]    @relation("UserOrder")
  products    Product[]  @relation("ProductsOwn")
  reviews     Review[]   @relation("userReview")
  wishlists   Wishlist[] @relation("userWishlist")

  @@map("users")
}

model Product {
  id                Int         @id @default(autoincrement())
  ownerId           String
  price             Int
  name              String
  description       String?
  image             String      @default("https://res.cloudinary.com/dqervfik7/image/upload/v1698202889/10-day-project/image/products/x125n4rie6tnb67parkw.jpg")
  quantity          Int         @default(0)
  createdAt         DateTime    @default(now())
  orderLineContains OrderLine[] @relation("ContainInOrderLine")
  owner             User        @relation("ProductsOwn", fields: [ownerId], references: [id], onDelete: Cascade)
  reviews           Review[]    @relation("productReview")
  wishlists         Wishlist[]  @relation("productWishlist")
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     String
  orderedAt  DateTime    @default(now())
  user       User        @relation("UserOrder", fields: [userId], references: [id], onDelete: Cascade)
  orderLines OrderLine[] @relation("OrderContain")
}

model OrderLine {
  orderId   Int
  productId Int
  order     Order   @relation("OrderContain", fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation("ContainInOrderLine", fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId])
}

model Wishlist {
  userId    String
  productId Int
  wishedAt  DateTime @default(now())
  product   Product  @relation("productWishlist", fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation("userWishlist", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, productId])
}

model Review {
  id          Int      @id @default(autoincrement())
  userId      String
  productId   Int
  score       Int
  description String
  reviewedAt  DateTime @default(now())
  product     Product  @relation("productReview", fields: [productId], references: [id], onDelete: Cascade)
  user        User     @relation("userReview", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}
